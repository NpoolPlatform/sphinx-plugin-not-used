// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package npool

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SignClient is the client API for Sign service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SignClient interface {
	// 创建账户
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error)
	// 进行签名
	SignScript(ctx context.Context, in *SignScriptRequest, opts ...grpc.CallOption) (*SignScriptResponse, error)
}

type signClient struct {
	cc grpc.ClientConnInterface
}

func NewSignClient(cc grpc.ClientConnInterface) SignClient {
	return &signClient{cc}
}

func (c *signClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error) {
	out := new(CreateAccountResponse)
	err := c.cc.Invoke(ctx, "/sphinx.v1.Sign/CreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signClient) SignScript(ctx context.Context, in *SignScriptRequest, opts ...grpc.CallOption) (*SignScriptResponse, error) {
	out := new(SignScriptResponse)
	err := c.cc.Invoke(ctx, "/sphinx.v1.Sign/SignScript", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SignServer is the server API for Sign service.
// All implementations must embed UnimplementedSignServer
// for forward compatibility
type SignServer interface {
	// 创建账户
	CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error)
	// 进行签名
	SignScript(context.Context, *SignScriptRequest) (*SignScriptResponse, error)
	mustEmbedUnimplementedSignServer()
}

// UnimplementedSignServer must be embedded to have forward compatible implementations.
type UnimplementedSignServer struct {
}

func (UnimplementedSignServer) CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedSignServer) SignScript(context.Context, *SignScriptRequest) (*SignScriptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignScript not implemented")
}
func (UnimplementedSignServer) mustEmbedUnimplementedSignServer() {}

// UnsafeSignServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SignServer will
// result in compilation errors.
type UnsafeSignServer interface {
	mustEmbedUnimplementedSignServer()
}

func RegisterSignServer(s grpc.ServiceRegistrar, srv SignServer) {
	s.RegisterService(&Sign_ServiceDesc, srv)
}

func _Sign_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sphinx.v1.Sign/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sign_SignScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignServer).SignScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sphinx.v1.Sign/SignScript",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignServer).SignScript(ctx, req.(*SignScriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Sign_ServiceDesc is the grpc.ServiceDesc for Sign service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sign_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sphinx.v1.Sign",
	HandlerType: (*SignServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccount",
			Handler:    _Sign_CreateAccount_Handler,
		},
		{
			MethodName: "SignScript",
			Handler:    _Sign_SignScript_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/agents.proto",
}

// PluginClient is the client API for Plugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PluginClient interface {
	// 获取预签名信息
	GetSignInfo(ctx context.Context, in *GetSignInfoRequest, opts ...grpc.CallOption) (*SignInfo, error)
	// 余额查询
	GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*AccountBalance, error)
	// 广播交易
	BroadcastScript(ctx context.Context, in *BroadcastScriptRequest, opts ...grpc.CallOption) (*BroadcastScriptResponse, error)
	// 交易状态查询
	GetTxStatus(ctx context.Context, in *GetTxStatusRequest, opts ...grpc.CallOption) (*GetTxStatusResponse, error)
	// 账户交易查询
	GetTxJSON(ctx context.Context, in *GetTxJSONRequest, opts ...grpc.CallOption) (*AccountTxJSON, error)
}

type pluginClient struct {
	cc grpc.ClientConnInterface
}

func NewPluginClient(cc grpc.ClientConnInterface) PluginClient {
	return &pluginClient{cc}
}

func (c *pluginClient) GetSignInfo(ctx context.Context, in *GetSignInfoRequest, opts ...grpc.CallOption) (*SignInfo, error) {
	out := new(SignInfo)
	err := c.cc.Invoke(ctx, "/sphinx.v1.Plugin/GetSignInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*AccountBalance, error) {
	out := new(AccountBalance)
	err := c.cc.Invoke(ctx, "/sphinx.v1.Plugin/GetBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) BroadcastScript(ctx context.Context, in *BroadcastScriptRequest, opts ...grpc.CallOption) (*BroadcastScriptResponse, error) {
	out := new(BroadcastScriptResponse)
	err := c.cc.Invoke(ctx, "/sphinx.v1.Plugin/BroadcastScript", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) GetTxStatus(ctx context.Context, in *GetTxStatusRequest, opts ...grpc.CallOption) (*GetTxStatusResponse, error) {
	out := new(GetTxStatusResponse)
	err := c.cc.Invoke(ctx, "/sphinx.v1.Plugin/GetTxStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) GetTxJSON(ctx context.Context, in *GetTxJSONRequest, opts ...grpc.CallOption) (*AccountTxJSON, error) {
	out := new(AccountTxJSON)
	err := c.cc.Invoke(ctx, "/sphinx.v1.Plugin/GetTxJSON", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PluginServer is the server API for Plugin service.
// All implementations must embed UnimplementedPluginServer
// for forward compatibility
type PluginServer interface {
	// 获取预签名信息
	GetSignInfo(context.Context, *GetSignInfoRequest) (*SignInfo, error)
	// 余额查询
	GetBalance(context.Context, *GetBalanceRequest) (*AccountBalance, error)
	// 广播交易
	BroadcastScript(context.Context, *BroadcastScriptRequest) (*BroadcastScriptResponse, error)
	// 交易状态查询
	GetTxStatus(context.Context, *GetTxStatusRequest) (*GetTxStatusResponse, error)
	// 账户交易查询
	GetTxJSON(context.Context, *GetTxJSONRequest) (*AccountTxJSON, error)
	mustEmbedUnimplementedPluginServer()
}

// UnimplementedPluginServer must be embedded to have forward compatible implementations.
type UnimplementedPluginServer struct {
}

func (UnimplementedPluginServer) GetSignInfo(context.Context, *GetSignInfoRequest) (*SignInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSignInfo not implemented")
}
func (UnimplementedPluginServer) GetBalance(context.Context, *GetBalanceRequest) (*AccountBalance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedPluginServer) BroadcastScript(context.Context, *BroadcastScriptRequest) (*BroadcastScriptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastScript not implemented")
}
func (UnimplementedPluginServer) GetTxStatus(context.Context, *GetTxStatusRequest) (*GetTxStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTxStatus not implemented")
}
func (UnimplementedPluginServer) GetTxJSON(context.Context, *GetTxJSONRequest) (*AccountTxJSON, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTxJSON not implemented")
}
func (UnimplementedPluginServer) mustEmbedUnimplementedPluginServer() {}

// UnsafePluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PluginServer will
// result in compilation errors.
type UnsafePluginServer interface {
	mustEmbedUnimplementedPluginServer()
}

func RegisterPluginServer(s grpc.ServiceRegistrar, srv PluginServer) {
	s.RegisterService(&Plugin_ServiceDesc, srv)
}

func _Plugin_GetSignInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSignInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).GetSignInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sphinx.v1.Plugin/GetSignInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).GetSignInfo(ctx, req.(*GetSignInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sphinx.v1.Plugin/GetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).GetBalance(ctx, req.(*GetBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_BroadcastScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BroadcastScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).BroadcastScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sphinx.v1.Plugin/BroadcastScript",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).BroadcastScript(ctx, req.(*BroadcastScriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_GetTxStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTxStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).GetTxStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sphinx.v1.Plugin/GetTxStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).GetTxStatus(ctx, req.(*GetTxStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_GetTxJSON_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTxJSONRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).GetTxJSON(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sphinx.v1.Plugin/GetTxJSON",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).GetTxJSON(ctx, req.(*GetTxJSONRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Plugin_ServiceDesc is the grpc.ServiceDesc for Plugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Plugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sphinx.v1.Plugin",
	HandlerType: (*PluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSignInfo",
			Handler:    _Plugin_GetSignInfo_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _Plugin_GetBalance_Handler,
		},
		{
			MethodName: "BroadcastScript",
			Handler:    _Plugin_BroadcastScript_Handler,
		},
		{
			MethodName: "GetTxStatus",
			Handler:    _Plugin_GetTxStatus_Handler,
		},
		{
			MethodName: "GetTxJSON",
			Handler:    _Plugin_GetTxJSON_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/agents.proto",
}
