// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// CoinInfosColumns holds the columns for the "coin_infos" table.
	CoinInfosColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Unique: true, Size: 16},
		{Name: "unit", Type: field.TypeString, Size: 4},
		{Name: "need_signinfo", Type: field.TypeBool, Default: false},
	}
	// CoinInfosTable holds the schema information for the "coin_infos" table.
	CoinInfosTable = &schema.Table{
		Name:       "coin_infos",
		Columns:    CoinInfosColumns,
		PrimaryKey: []*schema.Column{CoinInfosColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "coininfo_name",
				Unique:  true,
				Columns: []*schema.Column{CoinInfosColumns[1]},
			},
			{
				Name:    "coininfo_unit",
				Unique:  false,
				Columns: []*schema.Column{CoinInfosColumns[2]},
			},
		},
	}
	// KeyStoresColumns holds the columns for the "key_stores" table.
	KeyStoresColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "address", Type: field.TypeString, Size: 48},
		{Name: "private_key", Type: field.TypeString, Size: 80},
		{Name: "coin_info_keys", Type: field.TypeInt, Nullable: true},
	}
	// KeyStoresTable holds the schema information for the "key_stores" table.
	KeyStoresTable = &schema.Table{
		Name:       "key_stores",
		Columns:    KeyStoresColumns,
		PrimaryKey: []*schema.Column{KeyStoresColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "key_stores_coin_infos_keys",
				Columns:    []*schema.Column{KeyStoresColumns[3]},
				RefColumns: []*schema.Column{CoinInfosColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "keystore_address_coin_info_keys",
				Unique:  true,
				Columns: []*schema.Column{KeyStoresColumns[1], KeyStoresColumns[3]},
			},
		},
	}
	// ReviewsColumns holds the columns for the "reviews" table.
	ReviewsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "is_approved", Type: field.TypeBool, Default: false},
		{Name: "operator_note", Type: field.TypeString, Size: 70},
		{Name: "createtime_utc", Type: field.TypeInt},
		{Name: "updatetime_utc", Type: field.TypeInt},
		{Name: "transaction_review", Type: field.TypeInt, Nullable: true},
	}
	// ReviewsTable holds the schema information for the "reviews" table.
	ReviewsTable = &schema.Table{
		Name:       "reviews",
		Columns:    ReviewsColumns,
		PrimaryKey: []*schema.Column{ReviewsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "reviews_transactions_review",
				Columns:    []*schema.Column{ReviewsColumns[5]},
				RefColumns: []*schema.Column{TransactionsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "review_is_approved_createtime_utc",
				Unique:  false,
				Columns: []*schema.Column{ReviewsColumns[1], ReviewsColumns[3]},
			},
		},
	}
	// TransactionsColumns holds the columns for the "transactions" table.
	TransactionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "amount_int", Type: field.TypeInt},
		{Name: "amount_digits", Type: field.TypeInt, Default: 9},
		{Name: "address_from", Type: field.TypeString, Size: 64},
		{Name: "address_to", Type: field.TypeString, Size: 64},
		{Name: "need_manual_review", Type: field.TypeBool, Default: true},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"recharge", "payment", "withdraw", "unknown"}},
		{Name: "transaction_id_insite", Type: field.TypeString, Unique: true, Size: 64},
		{Name: "transaction_id_chain", Type: field.TypeString, Size: 80},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"pending_review", "pending_process", "pending_signinfo", "pending_signaction", "pending_broadcast", "pending_confirm", "done", "rejected", "error_expected", "error_unexpected"}},
		{Name: "mutex", Type: field.TypeBool, Default: false},
		{Name: "createtime_utc", Type: field.TypeInt},
		{Name: "updatetime_utc", Type: field.TypeInt},
		{Name: "coin_info_transactions", Type: field.TypeInt, Nullable: true},
	}
	// TransactionsTable holds the schema information for the "transactions" table.
	TransactionsTable = &schema.Table{
		Name:       "transactions",
		Columns:    TransactionsColumns,
		PrimaryKey: []*schema.Column{TransactionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "transactions_coin_infos_transactions",
				Columns:    []*schema.Column{TransactionsColumns[13]},
				RefColumns: []*schema.Column{CoinInfosColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "transaction_address_from_address_to_type_status_createtime_utc",
				Unique:  false,
				Columns: []*schema.Column{TransactionsColumns[3], TransactionsColumns[4], TransactionsColumns[6], TransactionsColumns[9], TransactionsColumns[11]},
			},
			{
				Name:    "transaction_transaction_id_insite_coin_info_transactions",
				Unique:  true,
				Columns: []*schema.Column{TransactionsColumns[7], TransactionsColumns[13]},
			},
			{
				Name:    "transaction_transaction_id_chain_coin_info_transactions",
				Unique:  true,
				Columns: []*schema.Column{TransactionsColumns[8], TransactionsColumns[13]},
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		CoinInfosTable,
		KeyStoresTable,
		ReviewsTable,
		TransactionsTable,
	}
)

func init() {
	KeyStoresTable.ForeignKeys[0].RefTable = CoinInfosTable
	ReviewsTable.ForeignKeys[0].RefTable = TransactionsTable
	TransactionsTable.ForeignKeys[0].RefTable = CoinInfosTable
}
